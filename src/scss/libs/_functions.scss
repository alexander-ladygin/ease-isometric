@import 'math';


// list
    // list-remove-nth
        //  EXAMPLE:
        //  $list: one two three four five;
        //  $obj: four two;
        //  list-remove-nth($list, $obj);
        //  return $list: one three five;
        @function list-remove-nth ($list, $search, $direction: ltr, $separator: space) {
            $length:        length($list);
            $start:         1;
            $end:           $length;
            $new-list: ();
            @if ($direction == rtl) {
                $start: $length;
                $end:   1;
            }
            @if (type-of($search) == list and $length > 1) {
                $new-list: $list;
                @each $search-item in $search {
                    $new-list: list-remove-nth($new-list, $search-item, $direction, $separator);
                }
            }
                @else {
                    @if ($length == 1) {
                        $new-list: $list;
                    }
                        @else {
                            @for $i from $start through $end {
                                $list-value: nth($list, $i);
                                @if ($list-value != $search) {
                                    $new-list: append($new-list, $list-value, $separator);
                                }
                            }
                        }
                }
            @return $new-list;
        }

    // list-remove-duplicates
        //  EXAMPLE:
        //  $list: one two three four five five two four six;
        //  append-nth($list);
        //  return list: one two three four five six;
        @function list-remove-duplicates ($list: null, $recursive: false) {
            @if ($list != null) {
                $result: ();

                @each $item in $list {
                    @if not index($result, $item) {
                        @if length($item) > 1 and $recursive {
                            $result: append($result, list-remove-duplicates($item, $recursive));
                        }
                            @else {
                                $result: append($result, $item);
                            }
                    }
                }

                @return $result;
            }
                @else {
                    @warn '$list: is null!';
                    @return null;
                }
        }

    // list-append
        //  EXAMPLE:
        //  $list: one two three four five;
        //  $items: 1 2 3 4 5;
        //  $position: 2;
        //  list-append($list, $items, $position);
        //  return list: one 1 2 3 4 5 two three four five;
        @function list-append ($list: null, $items: null, $position: last, $separator: space) {
            @if ($list != null and $items != null) {
                $new-list: ();
                $list-length: length($list);
                @if ($position == first) { $position: 1; }
                @if (type-of($position) == number) {
                    @each $value in $list {
                        @if (index($list, $value) == $position) {
                            $new-list: list-append-items($new-list, $items);
                        }
                        $new-list: append($new-list, $value, $separator);
                    }
                }
                    @else {
                        $new-list: list-append-items($list, $items);
                    }
                @return $new-list;
            }
                @else {
                    @if ($list == null) { @warn '$list: #{$list}; - is null!'; }
                    @if ($items == null) { @warn '$items: #{$items}; - is null!'; }
                    @return null;
                }
        }

    // list-concat
        //  EXAMPLE:
        //  $lists: (one two three four five) (1 2 3 4 5 6) (null false true) (example list);
        //  $new-list: () or (10 11);
        //  list-concat($list, $new-list);
        //  return list: 10 11 one two three four five 1 2 3 4 5 6 null false true example list;
        @function list-concat ($lists: null, $new-list: (), $separator: space) {
            @if ($lists != null) {
                @each $value in $lists {
                    @if (type-of($value) == list) {
                        $new-list: list-concat($value, $new-list, $separator);
                    }
                        @else {
                            $new-list: append($new-list, $value, $separator);
                        }
                }
                @return $new-list;
            }
                @else {
                    @warn '$lists: is null!';
                    @return null;
                }
        }

    // list-replace-item
        //  EXAMPLE:
        //  $list: one two three four five 1 2 3 4 5;
        //  $find: one 1;
        //  $replace: false;
        //  list-concat($list, $find, $replace);
        //  return list: false two three four five false 2 3 4 5;
        @function list-replace-item ($list: null, $find: null, $replace: null, $recursive: false, $separator: space) {
            @if ($list != null) {
                $new-list: ();
                @each $list-value in $list {
                    @if (type-of($list-value) == list and $recursive == true) {
                        $new-list: list-replace-item($list-value, $find, $replace, $recursive, $separator);
                    }
                        @else {
                            @each $find-value in $find {
                                @if ($find-value == $list-value) {
                                    $list-value: $replace;
                                }
                            }
                            $new-list: append($new-list, $list-value, $separator);
                        }
                }
                @return $new-list;
            }
                @else {
                    @warn '$list: is null!';
                    @return null;
                }
        }

    // list-append-items
        //  EXAMPLE:
        //  $list: one two three four five;
        //  $items: four two;
        //  list-append-items($list, $items);
        //  return list: one two three four five four two;
        @function list-append-items ($list, $items, $concat: false) {
            @if ($concat) {
                @return list-concat($items, $list);
            }
                @else {
                    @each $item in $items {
                        $list: append($list, $item, list-separator($list));
                    }
                    @return $list;
                }
        }

    // list-get-nth
        //  EXAMPLE:
        //  $item: three;
        //  $list: one two three four five;
        //  $param: next;
        //  list-get-nth($item, $list, $param);
        //  return value: four || null;
        @function list-get-nth ($item, $list, $param: null) {
            @if (type-of($item) == number or $param != null) {
                $index: null;
                $length: length($list);
                @if (type-of($item) == number and $param == null) {
                    @if ($item <= 0 and $item > $length) {
                        @warn 'LA-sass => _functions => index-nth($item, $list, $param) => $item[number] = #{$item}';
                        @return null;
                    }
                        @else {
                            @return nth($list, $item);
                        }
                }
                    @else {
                        $index: index($list, $item);
                        @if ($index == null) {
                            @return $index;
                        }
                            @else if ($param == next) {
                                @if ($index + 1 > $length) {
                                    @return null;
                                }
                                @return nth($list, $index + 1);
                            }
                            @else if ($param == prev) {
                                @if ($index - 1 <= 0) {
                                    @return null;
                                }
                                @return nth($list, $index - 1);
                            }
                                @else {
                                    @return null;
                                }
                    }
            }
                @else if ($item == first) {
                    @return nth($list, 1);
                }
                @else if ($item == last) {
                    @return nth($list, length($list));
                }
                    @else {
                        @warn 'LA-sass => _functions => index-nth($item, $list, $param) => $param is null!';
                        @return null;
                    }
        }

    // list-next-nth
        //  EXAMPLE:
        //  $item: three;
        //  $list: one two three four five;
        //  list-next-nth($item, $list);
        //  return value: four || null;
        @function list-next-nth ($item, $list) {
            @return list-get-nth($item, $list, next);
        }

    // list-prev-nth
        //  EXAMPLE:
        //  $item: three;
        //  $list: one two three four five;
        //  list-prev-nth($item, $list);
        //  return value: two || null;
        @function list-prev-nth ($item, $list) {
            @return list-get-nth($item, $list, prev);
        }

    // list-check-nth
        //  EXAMPLE:
        //  $item: three;
        //  $list: one two three four five;
        //  list-check-nth($item, $list);
        //  return value: true || false;
        @function list-check-nth ($item: null, $list: null) {
            @if ($item != null and $list != null) {
                @return index($list, $item);
            }
            @return null;
        }


// map
    // map-get-key
        // EXAMPLE:
        //    $map: (
        //       test: (
        //           one: (
        //               two: Hello world!
        //           )
        //           two: test
        //       )
        //    );
        //    map-get-key($map, test one two);
        //    return Hello world!
        @function map-get-key ($map, $key, $fallback: null) {
            @if (length($key) > 1) {
                @if type-of($map) == map and map-has-key($map, nth($key, 1)) {
                    $map: map-get($map, nth($key, 1));
                    $key: list-remove-nth($key, nth($key, 1), ltr, space);
                    @return map-get-key($map, $key, $fallback);
                }
                @return $fallback;
            }
                @else {
                    @if type-of($key) == list { $key: nth($key, 1); }
                    @if type-of($map) == map and map-has-key($map, $key) {
                        @return map-get($map, $key);
                    }
                    @return $fallback;
                }
        }
            // deprecated
                @function get-key ($map, $key, $fallback: null) {
                    @return map-get-key($map, $key, $fallback);
                }

    // map-check-key
        // EXAMPLE:
        //    $map: (
        //       test: (
        //           one: (
        //               two: Hello world!
        //           )
        //           two: test
        //       )
        //    );
        //    map-check-key($map, test one two);
        //    return true
        @function map-check-key ($map, $list-keys: ()) {
            @each $i-key in map-keys($map) {
                @each $j-key in $list-keys {
                    @if ($i-key == $j-key) {
                        @return true;
                    }
                }
            }
            @return false;
        }
            // deprecated
                @function check-key ($map, $list-keys: ()) {
                    @return map-check-key($map, $list-keys);
                }

    // map-get-keys
        // EXAMPLE:
        //    $map: (
        //       test: (
        //           one: (
        //               two: Hello world!
        //           )
        //           three: test
        //       )
        //    );
        //    $depth: 100;
        //    map-get-keys($map, $depth);
        //    return (two three)!
        //    map-get-keys($map, 100, true);
        //    return ( (test one two) (test three) );
        @function map-get-keys ($map: null, $depth: 1000000, $save-keys: x, $skip-keys: (), $depth-value: 0) {
            $separator: space;
            @if (type-of($map) == map) {
                $keys: ();

                @if ($depth == 0) {
                    @each $key in map-keys($map) {
                        @if (list-check-nth($key, $skip-keys) == null) {
                            $keys: append($keys, $key, $separator);
                        }
                    }
                }
                    @else {
                        @each $key in map-keys($map) {
                            @if (list-check-nth($key, $skip-keys) == null) {
                                $key-value: map-get($map, $key);

                                @if ( type-of($key-value) == map ) {

                                    @if ($save-keys != x) {
                                        $full-key: $key;
                                        @if ($depth-value > 0) { $full-key: append($save-keys, $key); }
                                        $keys: list-append(get-keys($key-value, $depth, $full-key, $skip-keys, $depth-value + 1), $keys, $separator);
                                    }
                                        @else {
                                            $keys: list-concat(get-keys($key-value, $depth, $save-keys, $skip-keys, $depth-value + 1), $keys, $separator);
                                        }

                                }
                                    @else if ($save-keys != x and $depth-value > 0) {
                                        $keys: append($keys, list-concat($key, $save-keys));
                                    }
                                        @else {
                                            $keys: append($keys, $key, $separator);
                                        }
                            }
                        }
                    }
                @return $keys;

            }
                @else {
                    @warn 'LA-sass => get-keys($map, $depth) => $map must be a map!'
                }
        }
            // deprecated
                @function get-keys ($map: null, $depth: 1000000, $save-keys: x, $skip-keys: (), $depth-value: 0) {
                    @return map-get-keys($map, $depth, $save-keys, $skip-keys, $depth-value);
                }

    // map-get-next
        // EXAMPLE:
        //    $map: (
        //       one: start,
        //       two: end
        //    );
        //    map-get-next($map, start);
        //    return end!
        @function map-get-next ($map, $key, $fallback: false) {
            // Check if map is valid
            @if (type_of($map) == map) {
                // Check if key exists in map
                @if (map_has_key($map, $key)) {
                    // Init index counter variable
                    $i: 0;
                    // Init key index
                    $key-index: false;
                    // Traverse map for key
                    @each $map-key, $map-value in $map {
                        // Update index
                        $i: $i + 1;
                        // If map key found, set key index
                        @if ($map-key == $key) {
                            $key-index: $i;
                        }
                        // If next index return next value
                        @if ($i == $key-index + 1) {
                            @return $map-value;
                        }
                        // If last entry return false
                        @if $i == length($map) {
                            @return $fallback;
                        }
                    }
                    @warn 'No next map item for key #{$key}';
                    @return $fallback;
                }
                @warn 'No valid key #{$key} in map';
                @return $fallback;
            }
            @warn 'No valid map';
            @return $fallback;
        }

    // map-set
        // EXAMPLE:
        //    $map: (
        //       one: 1,
        //       two: 2
        //    );
        //    $key: two;
        //    $value: 12;
        //    map-set($map, $key, $value);
        //    return $map: (
        //       one: 1,
        //       two: 12
        //    );
            @function map-set ($map, $key, $value) {
                $new: ($key: $value);
                @return map-merge($map, $new);
            }

    // map-extend
        // EXAMPLE:
        //    $map1: (
        //       test: (
        //           one: (
        //               two: Hello world!
        //           ),
        //           three: test
        //       )
        //    );
        //    $map2: (
        //       test: (
        //           one: (
        //               two: Wrold hello!
        //           ),
        //           two: (
        //               two: Hello friend!
        //           ),
        //           three: test2,
        //           four: test3
        //       )
        //    );
        //    map-extend($map1, $map2);
        //    return $map1: (
        //       test: (
        //           one: (
        //               two: Hello world!
        //           ),
        //           two: (
        //               two: Hello friend!
        //           ),
        //           three: test2,
        //           four: test3
        //       )
        //    );
            @function map-extend ($map-old, $map-new, $deep: true){
                @each $key, $new-value in $map-new {
                    @if (map-has-key($map-old, $key)) {
                        $old-value: map-get($map-old, $key);
                        @if (type-of($new-value) == map and type-of($old-value) == map) {
                            $merged-value: map-extend($old-value, $new-value);
                            $map-old: map-set($map-old, $key, $merged-value);
                        }
                            @else if ($deep) {
                              $map-old: map-set($map-old, $key, $new-value);
                            }
                    }
                        @else{
                            // There is no existing key so add
                            $map-old: map-set($map-old, $key, $new-value);
                        }
                }
                @return $map-old;
            }


// string
    // to string
        // EXAMPLE:
        //    to-string(div div div);
        //    return 'div div div';
        @function to-string ($value) {
            @return inspect($value);
        }

    // replace one string value
        // EXAMPLE:
        //    str-one-replace('div div div', 'div', '');
        //    return 'div div';
        //    str-one-replace('div div div', 'div', 'article');
        //    return 'article div div';
        @function str-one-replace ($string, $search, $replace: '') {
            $index: str-index($string, $search);
            @if $index {
                @return str-slice($string, 1, $index - 1) + $replace + str-slice($string, $index + str-length($search));
            }
        }

    // replace string value
        // EXAMPLE:
        //    str-one-replace('div article div div', 'div', '');
        //    return 'article';
        //    str-one-replace('div article div div', 'div', 'article');
        //    return 'article article article article';
        @function str-replace ($string, $search, $replace: '') {
            $index: str-index($string, $search);
            @if $index {
                @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
            }
            @return $string;
        }

    // bem-parent
        // EXAMPLE:
        //    #{&} = '.contacts__data__title_primary';
        //    bem-parent(#{&});
        //    return '.contacts__data';
            @function bem-parent ($string: '', $separator: '__', $slice: x) {
                $index: 0;
                $string: #{$string};
                @if (str-length($separator) == 1) { $index: 1; }
                $str: str-slice( $string, 0, str-last-index($string, $separator) - $index );
                @if (str-slice( $str, str-length($str) ) == '_') {
                    $str: str-slice( $str, 0, str-length($str) - 1 );
                }
                @return $str;
            }


    // str-last-index
        // EXAMPLE:
        //    str-last-index('.contacts__data__title_primary', '__');
        //    return 26;
            @function str-last-index ($string, $substring, $result: null) {
                $index: str-index($string, $substring);

                @if ($index != null) {
                    $result: $index;
                    @return $result + str-last-index( str-slice($string, $result + str-length($substring)), $substring, $result);
                }
                    @else if ($result != null) {
                        @return 0;
                    }
                        @else {
                            @return null;
                        }
            }

// number
    // strip-unit
        // EXAMPLE:
        //     $number: 100px;
        //     strip-unit($number);
        //     return 100; // typeof 'number'
            @function strip-unit ($number) {
                @if type-of($number) == 'number' and not unitless($number) {
                    @return $number / ($number * 0 + 1);
                }
                @return $number;
            }

